<!-- 
<h1>Pages#welcome</h1>
<p>Find me in app/views/pages/welcome.html.erb</p>
 -->

<script type="text/javascript" src="http://code.jquery.com/jquery.min.js"></script>

<div id="full-width-background">
  <div id="score-alert"></div>
  <div class="row">
    <div class="small-1 med-1 large-1 columns">&nbsp;</div>
    <div id="card-container" class="small-10 med-8 large-8 columns">
    <div class="small-1 med-1 large-1 columns">&nbsp;</div>
  </div>
</div>
<div id='mobile-canary'></div>


<% content_for :javascript do %>
<script type="text/javascript">
 
var attemptArray = [];
var sampleFacts = <%=raw @facts %>;
var card_counter = 0;
var mcTemplate = '<h2 id="card-header">&nbsp</h2></div><div id="multiple-choice-basket"><ul></ul></div>'

var freeTemplate = '<h2 id="card-header">&nbsp</h2><input id="free-text-field" autofocus></input>'

var puzzleTemplate = '<h2 id="card-header">&nbsp</h2><div id="answer-canvas"></div><div id="answer-basket"></div>'

// These click handlers are for the puzzle format
$("#card-container").on('click', "#answer-canvas .answer-object",
  function(){
    var $this = $(this);
    $("#answer-basket").append(this);
    var delete_index = attemptArray.indexOf($this.text());
    attemptArray.splice(delete_index, 1);
  }
)

window.deck = {
  init: function() {

  }
}

$("#card-container").on('click', "#answer-basket .answer-object",
  function(){
    var $this = $(this);
    $("#answer-canvas").append(this);
    attemptArray.push($this.text());
    console.log(checkPuzzleAnswer(attemptArray));
    // var answer_correct = check_answer(attemptArray);
    if(checkPuzzleAnswer(attemptArray)) {
      $("#answer-canvas > div").css({"border": "1px solid #669900", "background-color": "#89c43e", "color" : "white"});
       notifyPlusPoints(25);
       console.log("Card counter before puzzle ajax: "+card_counter)
      $.ajax({
          type: "POST",
          data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
          dataType: "json",
          url: "<%= user_deck_update_path %>"
        });
      setTimeout(function(){
        clearOldCard();
        showRandomCard();
      }, 3000)
    } else if(attemptArray.length === (sampleFacts[card_counter].definition).length){
      notifyLostPoints(-20);
      $("#answer-canvas > div").css({"border": "1px solid red", "background-color": "red", "color" : "white"})
      console.log("Card counter before puzzle ajax: "+card_counter)
      $.ajax({
          type: "POST",
          data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
          dataType: "json",
          url: "<%= user_deck_update_path %>"
        });
      setTimeout(function(){
        clearOldCard();
        showRandomCard();
      }, 3000)
    }
  }
)

// These are handlers for the multiple choice format
$("#card-container").on('click', ".mc-correct-answer",
  function(){
    var $this = $(this);
    $this.css({"border": "1px solid #669900", "background-color": "#89c43e", "color" : "white"})
    notifyPlusPoints(10);
    console.log("Card counter before multiple choice correct ajax: "+card_counter);
    $.ajax({
        type: "POST",
        data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
        dataType: "json",
        url: "<%= user_deck_update_path %>"
      });
    setTimeout(function(){
      clearOldCard();
      showRandomCard();
    }, 3000) 
  }
)


$("#card-container").on('click', ".mc-decoy",
  function(){
    var $this = $(this);
    $this.css({"border": "1px solid red", "background-color": "red", "color" : "white"})
    notifyLostPoints(-30);
    console.log("Card counter before mc incorrect ajax: "+card_counter)
    $.ajax({
        type: "POST",
        data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
        dataType: "json",
        url: "<%= user_deck_update_path %>"
      });
    setTimeout(function(){
      clearOldCard();
      showRandomCard();
    }, 3000)
  }
)


// Handlers for the free response format
// window.freeResponseTimer= setTimeout(function(){
//   console.log("delay!")  
// }, 3000);

$("#card-container").on('keydown', "#free-text-field", function(){
  console.log("about to set timeout.....");
  endAndStartTimer();
  }
)

// Setup functions for handing each card type

var puzzle = function(){
  $("#card-container").append(puzzleTemplate);
  aCardDefinition = shuffle(sampleFacts[card_counter].definition.slice(0));
  
  for(i = 0; i < aCardDefinition.length; i++){

    var $div = $('<div class="answer-object answer">'+aCardDefinition[i]+'</div>')
    var header = sampleFacts[card_counter].term;
    $("#answer-basket").append($div);
    $("#card-header").text(header);
  };

};

var free = function(){
  $("#card-container").append(freeTemplate);
  $("#card-header").text(sampleFacts[card_counter].term);


};

var mc = function(){
  $("#card-container").append(mcTemplate);
  $("#card-header").text(sampleFacts[card_counter].term);
  var decoyItemHtml = [];
  for (var i = 0; i < sampleFacts.length; i++) {
    // $("#multiple-choice-basket").append('<li class="mc-decoy">'+sampleFacts[i].definition+'</li>')
    var decoyString = sampleFacts[i].definition.join("")
      normalizeMultipleChoice(decoyString);
      shuffle(decoyItemHtml);
      decoyItemHtml.push('<li class="mc-decoy">'+decoyString+'</li>');

      // decoyItemHtml.push(sampleFacts[i]);
  };
  var correctAnswer = '<li class="mc-decoy">'+sampleFacts[card_counter].definition.join("")+'</li>'
  var correctAnswerWithCorrectClass = '<li class="mc-correct-answer">'+sampleFacts[card_counter].definition.join("")+'</li>'
  for(i in decoyItemHtml ){
    if(decoyItemHtml[i] != correctAnswer){
      console.log(decoyItemHtml[i])
      console.log(correctAnswer)
      if(decoyItemHtml[i].length > 29)
        $("#multiple-choice-basket").append(decoyItemHtml[i]);
    } else {
      $("#multiple-choice-basket").append(correctAnswerWithCorrectClass);
    }
  }
};

// --------------------




var normalizeMultipleChoice = function(string){
  string.replace(",,","_");
  string.replace(",","");
  string.replace("_",",");
  return string;
};


var checkPuzzleAnswer = function(attemptArray) {
  var joined_array = attemptArray.join("");
  var answer = (sampleFacts[card_counter].definition);
  console.log("joined_array: "+joined_array);
  console.log("answer: "+answer.join(""));
  return joined_array == answer.join("");
 
}

var checkAndPostFreeResponseAnswer = function(){
  console.log("CHecking answer....");
  var response = $("#free-text-field").val();
  var answer = (sampleFacts[card_counter].definition.join("").replace('"', "'"));
  console.log("answer: "+answer);
  console.log("response: "+response);
  if(response === answer){
    $("#free-text-field").css("background-color", "green");
    notifyPlusPoints(50);
    console.log("Card counter before free response ajax: "+card_counter)
    $.ajax({
        type: "POST",
        data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
        dataType: "json",
        url: "<%= user_deck_update_path %>"
      });
    setTimeout(function(){
      clearOldCard();
      showRandomCard();
    }, 3000)
  } else {

    $("#free-text-field").css("background-color", "red");
    notifyLostPoints(-5);
    console.log("Card counter before free response ajax: "+card_counter)
    $.ajax({
        type: "POST",
        data: {fact_id: sampleFacts[card_counter].fact_id, last_mastery_score: 0},
        dataType: "json",
        url: "<%= user_deck_update_path %>"
      });
    setTimeout(function(){
      clearOldCard();
      showRandomCard();
    }, 3000)
  }  
};


function shuffle(array) {
    for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
}
// Added this to be able to detect when a user is likely on mobile.
var checkIfMobile = function(){
if($(window).width() > 739) {     
    window.isMobile = false;
  } else {
    window.isMobile = true;
}
};

var notifyPlusPoints = function(points){
  $("#score-alert").text("+"+points);
  $("#score-alert").addClass("gained-points")
  setTimeout(function(){
    $("#score-alert").removeClass("gained-points").empty()
  },2000)
}

var notifyLostPoints = function(points){
  $("#score-alert").text(points);
  $("#score-alert").addClass("lost-points")
  setTimeout(function(){
    $("#score-alert").removeClass("lost-points").empty()
  },2000)
}

var clearOldCard = function() {
  $("#card-container").empty();
  attemptArray = [];
  card_counter+=1;
};

function showRandomCard(){
  console.log(card_counter)
  checkIfMobile();
  if(card_counter <= sampleFacts.length && isMobile != true) {
    var cardTypes =[puzzle, free, mc];
    var index = Math.floor(Math.random()*3);
    cardTypes[index]();
  } else if( card_counter < sampleFacts.length ) {
    var cardTypes =[puzzle, mc];
    var index = Math.floor(Math.random()*2);
    cardTypes[index]();
  } else {
    alert("This was the final question");
  }
};

var submitFormTimer;

function endAndStartTimer() {
  window.clearTimeout(submitFormTimer);
  //var millisecBeforeRedirect = 10000; 
  submitFormTimer = window.setTimeout(checkAndPostFreeResponseAnswer,1000); 
}

showRandomCard();
</script>

<% end %>







